* {
    padding: 0;
    margin: 0;
}
html, body {
    width: 100vw;
    height: 100vh;
    overflow: hidden;
}

.layout {
    display: flex;
    height: 100vh;
    overflow: hidden;
}
.layout>.loading {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    color: rgb(0, 123, 255);
    font-size: large;
    z-index: -1;
}
.side-bar {
    position: absolute;
    display: flex;
    flex-direction: column;
    left: -11rem;
    width: 11rem;
    height: 100%;
    background-color: rgba(255, 255, 255, 0);
    user-select: none;
    overflow-y: scroll;
		overflow-x: hidden;
    transition: all .3s 0s ease-in;
    z-index: 1000;
}
.side-bar::-webkit-scrollbar {
	display: none;
}
.side-bar::before {
    position: fixed;
	display: block;
    content: ">";
    font-size: 3rem;
    display: flex;
    align-items: center;
	justify-content: center;
    width: 2.5rem;
    height: 100vh;
    left: 0;
    top: 0;
    color: rgb(93, 59, 189, 0.5);
    z-index: 999;
}
@media screen and (max-width:500px) {
	.side-bar {
    	left: -8rem;
	}
	/* 处理：iframe手机上总是置于伪元素上层 */
	.side-bar:not(.side-bar:hover) {
		background-color: transparent !important;
	}
	.side-bar:not(.side-bar:hover) * {
		background-color: transparent !important;
		color: transparent !important;
	}
	.side-bar::before {
		content: "<";
		position: fixed;
		left: 0;
		top: 0;
		width: 3rem;
		height: 3rem;
		line-height: 3rem;
		align-content: top;
		background-color: rgb(136, 188, 255);
		color: #fff;
		transition: 1s;
		z-index: 999;
	}
	.side-bar:hover::before {
		left: -5rem;
	}
}
.side-bar:hover {
    left: 0rem;
    background-color: rgba(136, 166, 202, 0.3);
}
.side-bar-close {
	position: fixed;
	font-size: 3rem;
	display: block;
	width: 2rem;
	height: 2rem;
	line-height: 2rem;
	left: -3rem;
	top: calc(50vh - 1rem);
	color: rgb(93, 59, 189, 0.5);
	background-color: #ffffff00;
	border: none;
	z-index: 999;
	transition: all .3s 0s ease-in;
	-webkit-tap-highlight-color: transparent;
	-moz-tap-highlight-color:transparent;
	outline: 0;
}
.side-bar:hover+.side-bar-close {
	left: 11rem;
}

.side-bar:hover::before {
	content: "";
}
.side-bar-item {
	width: 100%;
	height: 3rem;
	line-height: 3rem;
	margin-bottom: 10px;
	background-color: rgba(163, 183, 215, 0.8);
	padding-left: 10px;
	user-select: none;
	cursor: default;
	text-align: left;
}
.side-bar-item::selection {
	cursor: default;
}
.side-bar-item.active {
	background-color: rgba(166, 128, 226, 0.8);
}
.content {
	flex: 1;
	width: 100vw;
	height: 100vh;
}
.content>iframe {
	width: 100%;
	height: 100%;
}

/* 侧边栏顶部旋转加载 */
.roll-wrapper {
    position: absolute;
	left: 50%;
	top: 0%;
	transform: translate(-50%, -100%);
    width: 20px;
    height: 20px;
}
.roll-outer, .roll-inner {
  position: absolute;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  border-radius: 50%;
}
.roll-outer {
  border: 5px solid rgb(246, 246, 246);
}
.roll-inner {
  border: 5px solid rgba(255, 255, 255, 0);
  border-top-color: rgba(249, 121, 121, 0.7);
  animation: roll .3s 0s linear infinite running;
}

@keyframes roll {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* loading */
/* 定义全局的变量 */
.loading {
	--light-color: #ffffff;
	--dark-color: #7a5600;
	background-color: var(--light-color);
}
/* 将所有元素以及它的伪元素的内外边距清除,并且改变盒子模型的计算方法 */
.container {
	/* 相对定位 */
	position: relative;
	width: 300px;
	height: 300px;
}

/* 太阳 start */
.container .sun {
	/* 绝对定位 */
	position: absolute;
	top: 135px;
	/* 这里是自动计算 也可以自己手动计算出82px */
	left: calc(50% - 136px / 2);
	width: 136px;
	height: 136px;
	animation: sun 2.7s linear infinite;
}
/* 圆圈 start */
.container .sun .sun-body {
	position: absolute;
	top: 18px;
	left: 18px;
	width: 100px;
	height: 100px;
	border-radius: 50%;
	border: 6px solid var(--dark-color);
	animation: sun-body 2.7s linear infinite;
}
/* 圆圈 end */
/* 外层光线 start */
.container .sun .sun-body .line {
	position: absolute;
	top: -24px;
	left: calc(50% - 3px);
	width: 6px;
	height: 12px;
	border-radius: 6px;
	background-color: var(--dark-color);
	/* 我们写了8个类名为line的元素 并设置变量--i 可以通过自定计算旋转角度 */
	transform: rotate(calc(var(--i) * 45deg));
	/* 在设置旋转角度为圆圈中心 */
	transform-origin: center 68px;
}
/* 外层光线 end */
/* 眼睛 start */
.container .sun .eye {
	position: absolute;
	top: 60px;
	left: 40px;
	width: 6px;
	height: 6px;
	border-radius: 50%;
	background-color: var(--dark-color);
	/* 用阴影复制一对眼睛 */
	box-shadow: 16px 0 var(--dark-color);
	animation: eye 2.7s linear infinite;
}
/* 眼睛 end */
/* 太阳 end */

/* 地平线 start */
.container .horizon {
	position: absolute;
	bottom: 0;
	width: 100%;
	height: 115px;
	background-color: var(--light-color);
}
.container .horizon::before {
	content: "";
	position: absolute;
	left: 5%;
	width: 90%;
	height: 6px;
	border-radius: 6px;
	background-color: var(--dark-color);
}
/* 地平线 end */
/* loading 字样 start */
.container .horizon::after {
	content: "Loading...";
	position: absolute;
	top: 30px;
	width: 100%;
	text-align: center;
	font-size: 25px;
	color: var(--dark-color);
	animation: loading 2.7s linear infinite;
}
/* loading 字样 end*/

@keyframes sun {
	10% {
		transform: translate(0);
	}
	40%,
	70% {
		transform: translateY(-40px);
	}
}

@keyframes sun-body {
	40% {
		transform: rotate(0);
	}
	50%,
	100% {
		transform: rotate(45deg);
	}
}

@keyframes eye {
	50%,
	60% {
		transform: scale(1);
	}
	55% {
		transform: scaleY(0.1);
	}
	70%,
	100% {
		transform: translateX(34px);
	}
}

@keyframes loading {
	40% {
		opacity: 1;
	}
	60% {
		opacity: 0;
	}
}
